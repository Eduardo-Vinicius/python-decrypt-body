import base64
from json import loads

from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP

def lambda_handler(event, context):
    # Replace with your base64-encoded private key and the encrypted data
    private_key_base64 = "MIIJQgIBADANBgkqhkiG9w0BAQEFAASCCSwwggkoAgEAAoICAQC4Q0pHlKZlwayi59DfWmFdK9Ft+VXnIlkZTe14hmkJufMb1MrI6PB2Vo5qyJ/pAMIZ2w9ZDHZvw5lkTSDTRO38+aYSfsPkZjyNOr2QorQzKXE9SLNJHOYzBs6aDNy1kEJ1EMEjLipjral4lkQHPwlWVHacBCMFsyZO4oKVqfdlzzCUn/DMyLYcMqE+do6yXAjMTCZJCo8KIcZlWOkGx1ohN3Jto8bXZCAlsCNT5BgMyEonjQRiqBuQ4qul28w/bU5ASLncOWfR1inHdOEo9H4d8Sv1OJclUWJAkGTWS3DFiirEBxd3YIe67ndJvmTbgDtVfA5lKD60Sw5YUfZ2eSb5DoeNJK1uNkot4exsBU7FGBPnTCY7Dk8vasTstdoB/aBdvL2pO6JnrHlpG8eWiqMl3n60vIAAYWArG0OGoV3DTLlgqMoj1u5TnXAvVNE2w6R1bXK0Pc8e+ieyESlzfulvIEhPWAns9NVWY2o1xWOt4AFOlmVoD6KWV76zqElwuy7ICnpszCXH0sWLUiMddoZQ4ghURDMDejAuufe53JKiE7yG00xVfVNHLrhXRnGkmd70RReJni9an4c5f9cHNpzcJiaycO4LVMKuN2Z3yBHvOJWUXBZzUsJ6eOaR9lLYXdR0W9Od6K6n9t0uKBGgilPYKJoUpj216S3zPQwhYfXikwIDAQABAoICAFjp34X67PBdLHjPc7LTYfgblMuEbTdDE8tqFxT5huXynKTpYZDhFmeEDOTqOn+spfzj/9vwb5YuxG3p6dUIhe50aPazxMMJsl5T4fVRDbNCZCo2Uo0NLOeieT9MxZO3MNpcY1YeiMXgns5ZdCoq+M53o2RVerDdabbXBjxB7+douwB8zS2EDJw+sh/6BZF7Z6Nte2vzdGJnOdzdslRbDdrJbqYJSYHWBs0o2WM5xYElhOLg4STaCbM4LauzDDPvArtyXH0wFjDjLvXYKG4izFiWb6e8zvJq+wY8puvhK2Gm8kv1QBWStuw09crX3MMudXMika+uY9OMBDgKFOvGOk9SXqMxsHjsxidKvijvfJiL/efdit9BuokzoufksVb7RZDE9KydV8OAn6DML/HUx+2nNcNYqR9530LUtmd2itL5qaqk67ZOl8KSY2eXNQ8rfIV3dF1Kn3yN27UEQMUTqfhNd76l43F5HRIkGDFfUhqUCF7tPOz7fp3j4q33tyqtfMOEs+2tujh/9JthrH/TbZJP0L4ETgrsXul0XL80gvV1w1as+GVdo0SPoyEyecT5Dbb2Gw8qx/hglUhO9xmaC0jhI8Y7zFU5+SlsPnei4Eunk6adVRNmearnQ6bBBN64NWgtTpa9OZjjN3clg1JEB436oSItRbRZcGvV7lQckZCBAoIBAQDa0eGnweFKz8pDjLo4aXb8kwgpErJELwFsuoF2MjbzDjwsXo9i+tCbwc3vzV4KnBLOnv+HyQfHETkm3ZidClkfvP7MwW7CHlRJAFqJaB7Cwmx+jZ6mXuPmFpqIRjYt1T15i+y6mMhwGDm3eF3m/TmBBP+Le99AmJLeXZTH4Py0ODtFsVbyi5KUM2roIHv5PHza2Dv/N2dBLJ0DSgSU4uof1CxbQlQMt1QpRM8ij6fDeDdLDoMO2LEyzKald50RBdrlqcB/ubGXLMCtaUKBhbGQWTn7a87JeXl489jAPVA6/SlCIOGxE46bMUJBMMP8jiAgSRW7NAbUzQzEG6f2OCDbAoIBAQDXkkPuvXv5ieYazNoJNUjbZxDH3ujbiCl5T/GQ66ICohgnOG0MO9IwXCb1s6W2q++lDi98weojB2k2UJbwKqr3ETNOzb+u9Yye7aVNvJVw47YByky2GK4+rWbNbDK5i8Z5/FXw5uIaBkP43J9FiUfUoeDnU8oFBUZaGGEK+qoACcaWnYv151pFIpTNrab+oxZMt2XggXo0JFsX9stacxYb/PnoaCYs3TXlVRZf5GNlXyk534kzQWUIXkg2ypbjK5uKmgcfW7eHMxNAOi52/VNJ0eaTu6s+HxeomOqFc6Gs8VL6sAwZ8U+nTzq9injkV82lHByoAt7x4xeCgabcDjapAoIBAQCaSTwjbbetaR+DS3mOBwbHheBOHYmmO8J0aHiZ30QRUmspGa9eKdzmxdqvh40UTAGSwFcJ5bvfJ4y1k69kowQ+NaMuugCfTIU/R8mOcuSljDK1dKN1SRjFhhCFn4PaAy2qQveyhcFmEB6591u2X7uo9d48+iVqxWlg8njSChgD9lYMiML2l2TNrAdoDmd7T6P1Jlv/UpAySwOWax0Z4XkU4iQ4YGck5CqqQoMOKl4um9fYyy2rTSx71gJ2TwVnGErEflFlfYfzQLHGU5559stBLTiNxvDx6/2zQ7QDr/ee8BukLc0UbuaxFCVUE89MhuWt/fodmcxrRP0IVTuzhtXbAoIBAGr87rY4WKU6aXd3n+beCTDK8CsiWJNL+rl4kb2JFLkV1cLxYD2oGuNhePyMknwczS0v4yWZ4ChOb0tDqAW+R2ejo8FCoBWnTIk8DMSOCeUjPpuY2YWurhvxV4owXuRzmKfGMqkDDcg4v9dtN6b9QScoyERG84aWXZota0xVp7WpJGRwAJykm8qgJRYHT1AlhNXCV8+asxnZyVQVakuTvq9ZWHad6gRuLWeKWTZyVVpkZkOQy7kihZAnqtN2rHhGlkWtuEc579Yr5SwFNDZd9841XKiJha2pJMbKTeq5vs3kX3iHkxn1B8FTsyWK6gD6CtgdIaPI+Pk36d0dl8CzVTECggEAL4ey7Tq0QbkW4V2Yc4G+glL3Qg1HGBXpV0vxxtx25JTv//Kkf2SjPbddqmoPIARhdpijqdHQTgOu7UAtm704kkSpzZcw2XP95zGfY2BuZmPXu1xnKsZArgtpmnWAdaH5DLDPd+18O66XQysKxDGldX8pq/YCf20HCXB7W+dWIgV2HOkmbC7oD5/RZHcQfc0w7dzw8qNt6zzhAQIGDolcSeTXk5lc4bBuoz5vQ6z1P21JO1fy7YX4Vw7Cu5Q1sT1JWrMq55hhUrEOtTd9EPjn4UbUeDbKQ6c0ig7AQY9h+W6/HjwCmL/02LxPZkjttK0rIoPjLapCgmSHni0ICOuLdw=="
    encrypted_data = "XaTqcfTzQp386VICkezvhbNj22GtP19v1+KWriVa5zru247TCP/ILcZt/vYxXL0otACF51i1EqNaWm8eaNm4aqV+B67ZlZ7J67isiECXCP1rxGlgyGar41OrpSYmPOkHUWpHgx2+j4uum7dFnrpsDGm/1qeoPVYCZjErv81cVSXw/LqOu9BKvwhJhIZQsnaxj4ANXRAag40aV2txHyFT7+NGwUUb34MWB9NG+5Th2nud711yul8CCQrx0yaLUOT7mf5TdKMAC5d+NZ+8Dox5wzb8f1lcWK8VqrRRyF087y7wTt1hFOFQUabzgKzFa+yOJMDEYTDZFcNGyprzFdFBY5r553XSthenlCCRspXKFVxpP5hcu0JcHqY4vZNkg0C85WYN1s0PpsXsIiqgt6MLCEv4DirY+LLDldyHkvW2kUeU2qxzMm+PnAWW6K4JKnMPtttkhAZlXAfYxFJLwND4RS+6up4BV7ZE9AGYLAiw0o68XaRvX+3XTr08A3BTiZrKL3dGY0n/WhAZf8dSl0iOkEWj0eVbmeN1oaGnJ4jKtTV9tqAtYsacB1lqUJcji9rEqzswy3fV5zcsYmtOktxUQmh8wVROt6heE9is716ykSOZcvfCAqnt9Kydy2H29vYajBCrDHq/FND5mqN+MiwkwcNSH8D5iF/lGDRcPYCchGU="

    decrypted_data = decrypt_with_private_key(encrypted_data, private_key_base64)
    print("Decrypted Data:", decrypted_data)

def format_private_key(private_key_base64):
    # Remove newlines and add PEM header and footer
    private_key_pem = "-----BEGIN RSA PRIVATE KEY-----\n"
    private_key_pem += '\n'.join([private_key_base64[i:i + 64] for i in range(0, len(private_key_base64), 64)])
    private_key_pem += "\n-----END RSA PRIVATE KEY-----\n"
    return private_key_pem

def decrypt_with_private_key(encrypted_data, private_key_base64):
    private_key_pem = format_private_key(private_key_base64)
    private_key_sra = RSA.import_key(private_key_pem)
    cipher = PKCS1_OAEP.new(private_key_sra)
    encrypted_data_bytes = base64.b64decode(encrypted_data)
    decrypted_data_bytes = cipher.decrypt(encrypted_data_bytes)
    response =  loads(decrypted_data_bytes.decode('utf-8'))

    return response

if __name__ == "__main__":
    lambda_handler(None, None)
